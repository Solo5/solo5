#!/bin/sh
# Copyright (c) 2015-2020 Contributors as noted in the AUTHORS file
#
# This file is part of Solo5, a sandboxed execution environment.
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided
# that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

prog_NAME="$(basename $0)"
prog_DIR="$(dirname $0)"

err()
{
    echo "${prog_NAME}: ERROR: $@" 1>&2
}

die()
{
    echo "${prog_NAME}: ERROR: $@" 1>&2
    exit 1
}

warn()
{
    echo "${prog_NAME}: WARNING: $@" 1>&2
}

usage()
{
    cat <<EOM 1>&2
usage: ${prog_NAME} --target=TARGET | --toolchain=TOOLCHAIN [ OPTIONS ]

Queries Solo5 toolchain parameters.

The Solo5 target to use must be selected using --target=TARGET, where TARGET is
one of '@@AVAILABLE_TARGETS@@'.

Alternatively, if you are configuring an ocaml-freestanding toolchain,
compile-time (but not link-time) parameters may be queried by selecting it with
--toolchain=TOOLCHAIN, where TOOLCHAIN is currently 'static'.

Options:
    --cc
    --ld
    --cflags
    --ldflags
    --lddeps
EOM
    exit 1
}

if [ -f "${prog_DIR}/Makeconf.sh" -a -d "${prog_DIR}/bindings" ]; then
    # If we are being invoked from inside a Solo5 source tree, then things are
    # slightly different. Instead of using the substitions below just source
    # the generated Makeconf.sh directly, and gate the rest on IN_TREE=1.
    . ${prog_DIR}/Makeconf.sh
    IN_TREE=1
else
#
# To be substituted during 'make' from values generated by 'configure.sh'.
#
@@MAKECONF_SH@@
#
# End substitutions
#
    IN_TREE=
fi

if [ -z "${IN_TREE}" ]; then
    INCDIR="${MAKECONF_PREFIX}/include/solo5"
    LIBDIR="${MAKECONF_PREFIX}/lib/solo5"
else
    INCDIR="${prog_DIR}/include"
fi

TARGET=
TOOLCHAIN=
while [ $# -gt 0 ]; do
    OPT="$1"
    shift

    case "${OPT}" in
        --target=*)
            TARGET="${OPT##*=}"
            if ! echo ",@@AVAILABLE_TARGETS@@," | grep -q ",${TARGET},"; then
                die "Invalid target: '${TARGET}'"
            fi
            if [ -z "${IN_TREE}" ]; then
                LDSCRIPT="${LIBDIR}/solo5_${TARGET}.lds"
                BINDINGS_OBJ="${LIBDIR}/solo5_${TARGET}.o"
            else
                LDSCRIPT="${prog_DIR}/bindings/${TARGET}/solo5_${TARGET}.lds"
                BINDINGS_OBJ="${prog_DIR}/bindings/${TARGET}/solo5_${TARGET}.o"
            fi
            ;;
        --toolchain=static)
            TOOLCHAIN=static
            ;;
        --cc)
            echo "${MAKECONF_CC}"
            ;;
        --ld)
            echo "${MAKECONF_LD}"
            ;;
        --cflags)
            [ -z "${TARGET}" -a -z "${TOOLCHAIN}" ] \
                && die "Need --target= or --toolchain="
            CFLAGS="${MAKECONF_CFLAGS} -isystem ${INCDIR}/crt -I${INCDIR}"
            echo "${CFLAGS}"
            ;;
        --ldflags)
            [ -z "${TARGET}" ] && die "Need --target="
            LDFLAGS="${MAKECONF_LDFLAGS} -T ${LDSCRIPT} ${BINDINGS_OBJ}"
            echo "${LDFLAGS}"
            ;;
        --lddeps)
            [ -z "${TARGET}" ] && die "Need --target="
            echo "${LDSCRIPT} ${BINDINGS_OBJ}"
            ;;
        --help)
            usage
            ;;
        *)
            err "Unknown option: '${OPT}'"
            usage
            ;;
    esac
done
