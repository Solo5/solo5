#!/bin/sh
# Copyright (c) 2015-2017 Contributors as noted in the AUTHORS file
#
# This file is part of ukvm, a unikernel monitor.
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided
# that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

die ()
{
    echo "solo5-vt-configure: error: $@" 1>&2
    exit 1
}

if [ "$#" -lt 1 ]; then
    cat <<EOM 1<&2
Usage: solo5-vt-configure SOURCEDIR [ MODULES ... ]

Configures the solo5-vt tender for your application, enabling the MODULES
specified.

Generates a Makefile.solo5-vt in the current directory. Use the "solo5-vt"
target to build the solo5-vt tender binary.

Options:
    SOURCEDIR is the path to the solo5-vt source
    MODULES can be any combination of: net blk gdb dumpcore

To use a cross-compiler, set the SOLO5_VT_CC environment variable.
To build solo5-vt statically, set the SOLO5_VT_STATIC environment variable.
EOM
    exit 1
fi

SOLO5_VT_CC=${SOLO5_VT_CC:-cc}
SOLO5_VT_SRC=$(readlink -f $1)
if [ ! -d ${SOLO5_VT_SRC} -o ! -f ${SOLO5_VT_SRC}/vt_core.c ]; then
    die "Not a solo5-vt source directory: ${SOLO5_VT_SRC}"
fi
shift

add_cflags ()
{
    SOLO5_VT_CFLAGS="${SOLO5_VT_CFLAGS} $@"
}

add_obj ()
{
    for i in "$@"; do
        SOLO5_VT_OBJS="${SOLO5_VT_OBJS} _build_solo5-vt/${i}"
    done
}

add_header ()
{
    for i in "$@"; do
        SOLO5_VT_HEADERS="${SOLO5_VT_HEADERS} ${SOLO5_VT_SRC}/${i}"
    done
}

add_module ()
{
    if [ ! -f ${SOLO5_VT_SRC}/vt_module_$1.c ]; then
        die "Invalid module: $1"
    fi
    enableit="-DUKVM_MODULE_$(echo $1 | tr '[a-z]' '[A-Z]')"
    add_obj "vt_module_$1.o"
    add_cflags "${enableit}"
}

SOLO5_VT_CFLAGS=
SOLO5_VT_LDFLAGS=
SOLO5_VT_LDLIBS=
SOLO5_VT_HEADERS=
SOLO5_VT_OBJS=
add_obj vt_core.o vt_elf.o vt_main.o
add_header vt.h vt_guest.h cc.h

for module in "$@"; do
    [ -z "${module}" ] && continue
    add_module ${module}
done

[ -n "${SOLO5_VT_STATIC}" ] && SOLO5_VT_LDFLAGS="-static"

TARGET=$(${SOLO5_VT_CC} -dumpmachine)
[ $? -ne 0 ] &&
    die "Error running '${SOLO5_VT_CC} -dumpmachine', is your compiler working?"
case ${TARGET} in
    x86_64-*linux*)
        add_obj vt_hv_kvm.o vt_hv_kvm_x86_64.o vt_cpu_x86_64.o
        add_header vt_hv_kvm.h vt_cpu_x86_64.h
        ;;
    x86_64-*freebsd1[12]*)
        add_obj vt_hv_freebsd.o vt_hv_freebsd_x86_64.o vt_cpu_x86_64.o
        add_header vt_hv_freebsd.h vt_cpu_x86_64.h
        ;;
    amd64-*-openbsd6.[4-9])
        add_obj vt_hv_openbsd.o vt_hv_openbsd_x86_64.o vt_cpu_x86_64.o
        add_header vt_hv_openbsd.h vt_cpu_x86_64.h
        ;;
    aarch64-*linux*)
        add_obj vt_hv_kvm.o vt_hv_kvm_aarch64.o vt_cpu_aarch64.o
        add_header vt_hv_kvm.h vt_cpu_aarch64.h
        ;;
    *)
        die "Unsupported compiler target: ${TARGET}"
        ;;
esac

cat <<EOF> Makefile.solo5-vt
# Generated by 'solo5-vt-configure $@'
# Using compiler '${SOLO5_VT_CC}', target '${TARGET}'

.BEGIN: ; @echo -e Warning: \$(MAKEFILE) requires GNU make.\\\\nWarning: Attempting to build with \"gmake -f \$(MAKEFILE) \$(.TARGETS)\" for you now. && gmake -f \$(MAKEFILE) \$(.TARGETS)

.PHONY: all
all: solo5-vt

SOLO5_VT_CC=${SOLO5_VT_CC}
SOLO5_VT_CFLAGS=-Wall -Werror -std=c99 -O2 -g ${SOLO5_VT_CFLAGS}
SOLO5_VT_LDFLAGS=${SOLO5_VT_LDFLAGS}
SOLO5_VT_LDLIBS=${SOLO5_VT_LDLIBS}

SOLO5_VT_OBJS=${SOLO5_VT_OBJS}
SOLO5_VT_HEADERS=${SOLO5_VT_HEADERS}

\$(SOLO5_VT_OBJS): \$(SOLO5_VT_HEADERS)

_build_solo5-vt:
	mkdir -p _build_solo5-vt

_build_solo5-vt/%.o: ${SOLO5_VT_SRC}/%.c \$(MAKEFILE_LIST) | _build_solo5-vt
	\$(SOLO5_VT_CC) \$(SOLO5_VT_CFLAGS) -c \$< -o \$@

solo5-vt: \$(SOLO5_VT_OBJS) \$(MAKEFILE_LIST)
	\$(SOLO5_VT_CC) \$(SOLO5_VT_LDFLAGS) -o \$@ \$(SOLO5_VT_OBJS) \$(SOLO5_VT_LDLIBS)

.PHONY: solo5-vt-clean
solo5-vt-clean:
	rm -rf _build_solo5-vt
	rm -f solo5-vt
EOF
